// Copyright (c) 2013-2014 Vittorio Romeo
// License: Academic Free License ("AFL") v. 3.0
// AFL License page: http://opensource.org/licenses/AFL-3.0

#ifndef SSVU_CORE_PREPROCESSOR_BOOL
#define SSVU_CORE_PREPROCESSOR_BOOL

#include "SSVUtils/Core/Preprocessor/Utils.hpp"

#define SSVPP_IMPL_BOOL(mX)	SSVPP_IMPL_BOOL_ ## mX
#define SSVPP_BOOL(mX)		SSVPP_IMPL_BOOL(mX)

#define SSVPP_IMPL_BITNOT_0 1
#define SSVPP_IMPL_BITNOT_1 0

#define SSVPP_IMPL_BITAND_00 0
#define SSVPP_IMPL_BITAND_01 0
#define SSVPP_IMPL_BITAND_10 0
#define SSVPP_IMPL_BITAND_11 1

#define SSVPP_IMPL_BITOR_00 0
#define SSVPP_IMPL_BITOR_01 1
#define SSVPP_IMPL_BITOR_10 1
#define SSVPP_IMPL_BITOR_11 1

#define SSVPP_IMPL_BITNOR_00 1
#define SSVPP_IMPL_BITNOR_01 0
#define SSVPP_IMPL_BITNOR_10 0
#define SSVPP_IMPL_BITNOR_11 0

#define SSVPP_IMPL_BITXOR_00 0
#define SSVPP_IMPL_BITXOR_01 1
#define SSVPP_IMPL_BITXOR_10 1
#define SSVPP_IMPL_BITXOR_11 0

#define SSVPP_BITNOT(mX)		SSVPP_TKNCAT_2(SSVPP_IMPL_BITNOT_, SSVPP_EXPAND(mX))
#define SSVPP_BITAND(m0, m1)	SSVPP_TKNCAT_3(SSVPP_IMPL_BITAND_, SSVPP_EXPAND(m0), SSVPP_EXPAND(m1))
#define SSVPP_BITOR(m0, m1)		SSVPP_TKNCAT_3(SSVPP_IMPL_BITOR_, SSVPP_EXPAND(m0), SSVPP_EXPAND(m1))
#define SSVPP_BITNOR(m0, m1)	SSVPP_TKNCAT_3(SSVPP_IMPL_BITNOR_, SSVPP_EXPAND(m0), SSVPP_EXPAND(m1))
#define SSVPP_BITXOR(m0, m1)	SSVPP_TKNCAT_3(SSVPP_IMPL_BITXOR_, SSVPP_EXPAND(m0), SSVPP_EXPAND(m1))

#define SSVPP_IMPL_NOT(mX)		SSVPP_BITNOT(SSVPP_BOOL(mX))
#define SSVPP_IMPL_AND(m0, m1)	SSVPP_BITAND(SSVPP_BOOL(m0), SSVPP_BOOL(m1))
#define SSVPP_IMPL_OR(m0, m1)	SSVPP_BITOR(SSVPP_BOOL(m0), SSVPP_BOOL(m1))
#define SSVPP_IMPL_NOR(m0, m1)	SSVPP_BITNOR(SSVPP_BOOL(m0), SSVPP_BOOL(m1))
#define SSVPP_IMPL_XOR(m0, m1)	SSVPP_BITXOR(SSVPP_BOOL(m0), SSVPP_BOOL(m1))

#define SSVPP_NOT(mX)			SSVPP_IMPL_NOT(mX)
#define SSVPP_AND(m0, m1)		SSVPP_IMPL_AND(m0, m1)
#define SSVPP_OR(m0, m1)		SSVPP_IMPL_OR(m0, m1)
#define SSVPP_NOR(m0, m1)		SSVPP_IMPL_NOR(m0, m1)
#define SSVPP_XOR(m0, m1)		SSVPP_IMPL_XOR(m0, m1)

#define SSVPP_IMPL_IF_0(mTrue, mFalse)	mFalse
#define SSVPP_IMPL_IF_1(mTrue, mFalse)	mTrue
#define SSVPP_IF(mCond, mTrue, mFalse)	SSVPP_TKNCAT_2(SSVPP_IMPL_IF_, SSVPP_BOOL(mCond)) (mTrue, mFalse)

#define SSVPP_COMMA_IF(mCond)			SSVPP_IF(mCond, SSVPP_COMMA, SSVPP_EMPTY)()

#endif
